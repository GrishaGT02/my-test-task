{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://wysiwyg-editor/./src/index.js"],"sourcesContent":["import './styles.css';\n\ntinymce.init({ //tinymce — это глобальный объект библиотеки TinyMCE, который предоставляет все функции для работы с редактором.\n  selector: '#editor', //selector — это селектор HTML-элемента, который будет использоваться для инициализации редактора. В данном случае, это элемент с id=\"editor\".\n  menubar: false, //menubar — это флаг, который отвечает за отображение меню в редакторе. false означает, что меню не будет отображаться.\n  toolbar: false, //toolbar — это флаг, который отвечает за отображение панели инструментов в редакторе. false означает, что панель инструментов не будет отображаться.\n  height: 500, //height — это высота редактора в пикселях.\n  branding: false, //branding — это флаг, который отвечает за отображение бренда TinyMCE в правом верхнем углу редактора. false означает, что бренд не будет отображаться.\n  content_style: `\n    body { background: #fff; color: #222; font-size: 16px; }\n    select[data-template-dropdown=\"true\"] {\n      padding: 6px 16px;\n      border-radius: 6px;\n      border: 2px solid #5e5;\n      background: #222;\n      color: #fff;\n      font-size: 1em;\n      margin: 4px 8px 4px 0;\n      outline: none;\n      transition: border 0.2s, background 0.2s;\n      font-family: inherit;\n      min-width: 120px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.08);\n    }\n    select[data-template-dropdown=\"true\"]:hover,\n    select[data-template-dropdown=\"true\"]:focus {\n      border: 2px solid #8f8;\n      background: #333;\n    }\n    select[data-template-dropdown=\"true\"]:focus option {\n      background: #444;\n      color: #fff;\n    }\n    .error {\n      display: inline-block;\n      padding: 6px 16px;\n      border-radius: 6px;\n      background: #e55;\n      color: #fff;\n      font-weight: bold;\n      margin: 4px 8px 4px 0;\n      font-size: 1em;\n      letter-spacing: 1px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.08);\n    }\n  `,\n  // удаление выпадающего списка при нажатии на Delete\n  setup: function(editor) { // setup — это функция, которая вызывается при инициализации редактора.\n    editor.on('keydown', function(e) { // editor.on — это метод, который позволяет добавить обработчик событий для редактора.\n      if (e.key === 'Delete') { // e.key — это свойство, которое содержит код нажатой клавиши.\n        const rng = editor.selection.getRng(); // rng — это объект, который содержит информацию о выделенной области текста.\n        if (rng.collapsed) {\n          let node = rng.startContainer; // startContainer — это свойство, которое содержит узел, находящийся в начале выделенной области.\n          let offset = rng.startOffset; // startOffset — это свойство, которое содержит смещение в начале выделенной области.\n          let next = null;\n          if (node.nodeType === 3) { // текстовый узел\n            // Если курсор в конце текста, ищем следующий элемент\n            if (offset === node.length) {\n              next = node.nextSibling; // nextSibling — это свойство, которое содержит следующий узел в дереве DOM.\n            }\n          } else if (node.nodeType === 1) { // элемент\n            next = node.childNodes[offset]; // childNodes — это свойство, которое содержит все дочерние узлы элемента.\n          }\n          if (next && next.nodeName === 'SELECT' && next.getAttribute('data-template-dropdown') === 'true') { // next.nodeName — это свойство, которое содержит имя тега элемента.\n            next.remove(); // remove — это метод, который удаляет элемент из дерева DOM.\n            e.preventDefault(); // preventDefault — это метод, который отменяет действие по умолчанию для события.\n          }\n        }\n      }\n    });\n  }\n});\n\n// генерация уникального id для шаблонов \nfunction generateId() {\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n// массив шаблонов\nlet templates = [\n  { id: generateId(), text: 'template 1' }, // id: generateId() — это метод, который генерирует уникальный id для шаблона.\n  { id: generateId(), text: 'template 2' },\n  { id: generateId(), text: 'template 3' }\n];\nlet selectedTemplateIndex = 0; // выбранный шаблон\n\nconst templatesList = document.getElementById('templates-list'); // список шаблонов\nconst addBtn = document.getElementById('add-template'); // кнопка добавления шаблона\nconst removeBtn = document.getElementById('remove-template'); // кнопка удаления шаблона\nconst editInput = document.getElementById('edit-template-input'); // поле для редактирования шаблона\n\n// рендеринг списка шаблонов справа\nfunction renderTemplatesList() { // функция для рендеринга списка шаблонов справа\n  templatesList.innerHTML = ''; // очистка списка шаблонов\n  templates.forEach((tpl, i) => { // перебираем все шаблоны\n    const li = document.createElement('li'); // создаем новый элемент списка\n    li.textContent = tpl.text; // добавляем текст шаблона\n    li.className = (i === selectedTemplateIndex) ? 'selected' : ''; // добавляем класс selected, если шаблон выбран\n    li.onclick = () => { // обработчик клика на шаблон\n      selectedTemplateIndex = i; // устанавливаем выбранный шаблон\n      renderTemplatesList(); // перерисовываем список шаблонов\n      renderEditInput(); // перерисовываем поле для редактирования шаблона\n    };\n    templatesList.appendChild(li); // добавляем элемент списка в список шаблонов\n  });\n}\n\nfunction renderEditInput() { // функция для рендеринга поля для редактирования шаблона\n  if (templates[selectedTemplateIndex] !== undefined) { // если шаблон выбран\n    editInput.value = templates[selectedTemplateIndex].text; // устанавливаем текст шаблона в поле для редактирования\n    editInput.disabled = false; // отключаем поле для редактирования\n  } else {\n    editInput.value = ''; // устанавливаем пустой текст в поле для редактирования\n    editInput.disabled = true; // отключаем поле для редактирования\n  }\n}\n// синхронизация выпадающих списков в редакторе\nfunction syncDropdownsInEditor() {\n  const editor = tinymce.activeEditor; // editor — это глобальный объект библиотеки TinyMCE, который предоставляет все функции для работы с редактором.\n  if (!editor) return; // если редактор не активен, то выходим из функции\n  const body = editor.getBody(); // getBody — это метод, который возвращает тело документа.\n  let changed = false; // changed — это флаг, который отвечает за изменение состояния выпадающих списков в редакторе.\n  // Собираем все select с data-template-dropdown\n  const selects = body.querySelectorAll('select[data-template-dropdown=\"true\"]'); // selects — это массив всех select с data-template-dropdown=\"true\"\n  selects.forEach(select => { // перебираем все select\n    const selectedId = select.value; // selectedId — это значение выбранного select\n    const found = templates.find(t => t.id === selectedId); // found — это флаг, который отвечает за нахождение шаблона в массиве шаблонов.\n    if (!found) { // если шаблон не найден\n      // Заменяем select на ERROR только если выбранный ID действительно не найден\n      const errorSpan = document.createElement('span'); // создаем новый элемент span\n      errorSpan.className = 'error'; // добавляем класс error\n      errorSpan.textContent = 'ERROR'; // добавляем текст ERROR\n      select.parentNode.replaceChild(errorSpan, select);\n      changed = true; // изменяем флаг changed\n    } else {\n      // Пересоздаём опции с обновленными текстами шаблонов\n      const prevValue = select.value; // prevValue — это значение выбранного select\n      select.innerHTML = ''; // очищаем select\n      templates.forEach((tpl) => { // перебираем все шаблоны\n        const opt = document.createElement('option'); // создаем новый элемент option\n        opt.value = tpl.id; // добавляем id шаблона\n        opt.textContent = tpl.text; // добавляем текст шаблона\n        select.appendChild(opt); // добавляем option в select\n      });\n      // Восстанавливаем выбранное значение, если оно все еще валидно\n      if (templates.find(t => t.id === prevValue)) { // если шаблон найден\n        select.value = prevValue; // устанавливаем значение выбранного шаблона\n      } else if (templates.length > 0) { // если шаблоны есть\n        // Если предыдущее значение не валидно, выбираем первый доступный шаблон\n        select.value = templates[0].id; // устанавливаем значение выбранного шаблона\n      }\n      changed = true; // изменяем флаг changed\n    }\n  });\n  if (changed) {\n    editor.nodeChanged(); // Обновить состояние редактора \n  }\n}\n// обновляет весь интерфейс при изменении шаблонов\nfunction onTemplatesChanged() {\n  renderTemplatesList(); // перерисовываем список шаблонов\n  renderEditInput(); // перерисовываем поле для редактирования шаблона\n  syncDropdownsInEditor(); // синхронизируем выпадающие списки в редакторе\n}\n// обработчик события на кнопку добавления шаблона\naddBtn.onclick = () => {\n  templates.push({ id: generateId(), text: 'template' }); // добавляем новый шаблон в массив шаблонов\n  selectedTemplateIndex = templates.length - 1; // устанавливаем выбранный шаблон\n  onTemplatesChanged(); // обновляем интерфейс\n};\n// обработчик события на кнопку удаления шаблона\nremoveBtn.onclick = () => {\n  if (templates.length === 0) return; // если шаблоны нет, то выходим из функции\n  templates.splice(selectedTemplateIndex, 1); // удаляем шаблон из массива шаблонов\n  if (selectedTemplateIndex >= templates.length) { // если выбранный шаблон больше или равен количеству шаблонов\n    selectedTemplateIndex = templates.length - 1; // устанавливаем выбранный шаблон\n  }\n  onTemplatesChanged(); // обновляем интерфейс\n};\n// обработчик события на кнопку сохранения шаблона\neditInput.addEventListener('keydown', (e) => {\n  if (e.key === 'Enter') { // если нажата клавиша Enter\n    saveEditInput(); // сохраняем шаблон\n    editInput.blur(); // отключаем поле для редактирования\n  }\n});\neditInput.addEventListener('blur', saveEditInput); // обработчик события на кнопку сохранения шаблона\n// сохраняет шаблон\nfunction saveEditInput() {\n  if (templates[selectedTemplateIndex] !== undefined) { // если шаблон выбран\n    const oldText = templates[selectedTemplateIndex].text; // oldText — это значение выбранного шаблона\n    templates[selectedTemplateIndex].text = editInput.value; // устанавливаем текст шаблона\n    // Если изменился только текст (не ID), то обновляем только опции в выпадающих списках\n    if (oldText !== editInput.value) { // если текст шаблона изменился\n      renderTemplatesList(); // перерисовываем список шаблонов\n      renderEditInput(); // перерисовываем поле для редактирования шаблона\n      updateDropdownOptions(); // обновляем выпадающие списки\n    }\n  }\n}\n// обновляет выпадающие списки\nfunction updateDropdownOptions() {\n  const editor = tinymce.activeEditor; // editor — это глобальный объект библиотеки TinyMCE, который предоставляет все функции для работы с редактором.\n  if (!editor) return; // если редактор не активен, то выходим из функции\n  const body = editor.getBody(); // getBody — это метод, который возвращает тело документа.\n  const selects = body.querySelectorAll('select[data-template-dropdown=\"true\"]'); // selects — это массив всех select с data-template-dropdown=\"true\"\n  let changed = false; // changed — это флаг, который отвечает за изменение состояния выпадающих списков в редакторе.\n\n  selects.forEach(select => { // перебираем все select\n    const prevValue = select.value; // prevValue — это значение выбранного select\n    select.innerHTML = ''; // очищаем select\n    templates.forEach((tpl) => { // перебираем все шаблоны\n      const opt = document.createElement('option'); // создаем новый элемент option\n      opt.value = tpl.id; // добавляем id шаблона\n      opt.textContent = tpl.text; // добавляем текст шаблона\n      select.appendChild(opt); // добавляем option в select\n    });\n    // Восстанавливаем выбранное значение, если оно все еще валидно\n    if (templates.find(t => t.id === prevValue)) { // если шаблон найден\n      select.value = prevValue; // устанавливаем значение выбранного шаблона\n    } else if (prevValue) { // если значение выбранного шаблона не найдено\n      // Если такого id уже нет, но value был — добавим disabled option для наглядности\n      const opt = document.createElement('option'); // создаем новый элемент option\n      opt.value = prevValue; // добавляем значение выбранного шаблона\n      opt.textContent = '[удалено]'; // добавляем текст удаленного шаблона\n      opt.disabled = true; // отключаем option\n      opt.selected = true; // устанавливаем option в выбранное состояние\n      select.insertBefore(opt, select.firstChild); // добавляем option в select\n      select.value = prevValue; // устанавливаем значение выбранного шаблона\n    } else if (templates.length > 0) { // если шаблоны есть\n      select.value = templates[0].id; // устанавливаем значение выбранного шаблона\n    }\n    changed = true; // изменяем флаг changed\n  });\n\n  if (changed) {\n    editor.nodeChanged(); // Обновить состояние редактора \n  }\n}\n\n// генерация HTML для выпадающего списка  \nfunction getTemplateDropdownHTML(selectedId = null) { // selectedId — это значение выбранного select\n  if (!templates.length) { // если шаблоны нет\n    return '<span class=\"error\">ERROR</span>'; // возвращаем HTML для ошибки\n  }\n  let options = templates.map((tpl) => // перебираем все шаблоны\n    `<option value=\"${tpl.id}\"${tpl.id === selectedId ? ' selected' : ''}>${tpl.text}</option>` // добавляем option в select\n  ).join(''); // объединяем все option в одну строку\n  // Если selectedId не найден, не выставляем selected\n  return `<select data-template-dropdown=\"true\">${options}</select>`; // возвращаем HTML для выпадающего списка\n}\n\nconst insertBtn = document.getElementById('insert-btn');\ninsertBtn.onclick = () => {\n  // Вставляем select с текущими шаблонами, по умолчанию выбран первый\n  const html = getTemplateDropdownHTML(templates[0] ? templates[0].id : null); // если есть шаблоны, берёт ID первого, иначе null\n  tinymce.activeEditor.execCommand('mceInsertContent', false, html); // вставляем HTML в редактор\n};\n\n// Инициализация\nonTemplatesChanged();\n"],"names":["generateId","Math","random","toString","substr","tinymce","init","selector","menubar","toolbar","height","branding","content_style","setup","editor","on","e","key","rng","selection","getRng","collapsed","node","startContainer","offset","startOffset","next","nodeType","length","nextSibling","childNodes","nodeName","getAttribute","remove","preventDefault","templates","id","text","selectedTemplateIndex","templatesList","document","getElementById","addBtn","removeBtn","editInput","renderTemplatesList","innerHTML","forEach","tpl","i","li","createElement","textContent","className","onclick","renderEditInput","appendChild","undefined","value","disabled","onTemplatesChanged","activeEditor","body","getBody","changed","querySelectorAll","select","selectedId","find","t","prevValue","opt","errorSpan","parentNode","replaceChild","nodeChanged","syncDropdownsInEditor","saveEditInput","oldText","selects","selected","insertBefore","firstChild","updateDropdownOptions","push","splice","addEventListener","blur","html","arguments","options","map","concat","join","getTemplateDropdownHTML","execCommand"],"sourceRoot":""}